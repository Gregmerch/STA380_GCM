return (substr(time,1,2))
}
return (substr(time,1,1))
}
smaller$hour = lapply(smaller$CRSDepTime,GetHour)
totaldelay = rowsum(smaller[c(10,11)],factor(smaller$depdate),na.action=na.pass, na.rm = TRUE)
avgDailyDelay = aggregate (smaller[c(10,11)],list(smaller$depdate),FUN= mean, na.action = na.pass, na.rm = TRUE)
names(avgDailyDelay) = c('D1ay','ArrDelay','DepDelay')
avgDailyDelay_long = melt(avgDailyDelay,id="D1ay")
avgDailyDelay = aggregate(smaller[c(10,11)],list(smaller$depdate),FUN=mean,na.action=na.pass, na.rm= TRUE)
avgMonthlyDelay= aggregate(smaller[c(10,11)],list(smaller$Month),FUN = mean, na.action = na.pass, na.rm = TRUE)
totalMonthlyCancelation = rowsum(smaller[14],factor(smaller$Month), na.action= na.pass, na.rm = TRUE)
names(avgMonthlyDelay) = c('Mon','ArrDelay','DepDelay')
months = c('Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec')
avgMonthlyDelay$Mon = months
names(avgDailyDelay_long)
melted = melt(avgMonthlyDelay,id="Mon")
melted$Mon = factor(melted$Mon, level = months)
daily_melt = melt(avgDailyDelay, id="Day")
daily_melt$Day = factor(daily_melt$Day)
library(reshape2)
library(ggplot2)
library(plyr)
flights = read.csv('../data/ABIA.csv')
names(flights)
dim(flights)
smaller = flights[-c(10,11,12,13,14,19,20,21,23,24,25,26,27,28,29)]
names(smaller)
#convert a date object
smaller$depdate = as.Date(paste(smaller$DayofMonth,smaller$Month,smaller$Year,sep="."),"%d.%m.%Y")
GetHour= function(time){
if (nchar(time) == 4){
return (substr(time,1,2))
}
return (substr(time,1,1))
}
smaller$hour = lapply(smaller$CRSDepTime,GetHour)
totaldelay = rowsum(smaller[c(10,11)],factor(smaller$depdate),na.action=na.pass, na.rm = TRUE)
avgDailyDelay = aggregate (smaller[c(10,11)],list(smaller$depdate),FUN= mean, na.action = na.pass, na.rm = TRUE)
names(avgDailyDelay) = c('D1ay','ArrDelay','DepDelay')
avgDailyDelay_long = melt(avgDailyDelay,id="D1ay")
avgDailyDelay = aggregate(smaller[c(10,11)],list(smaller$depdate),FUN=mean,na.action=na.pass, na.rm= TRUE)
avgMonthlyDelay= aggregate(smaller[c(10,11)],list(smaller$Month),FUN = mean, na.action = na.pass, na.rm = TRUE)
totalMonthlyCancelation = rowsum(smaller[14],factor(smaller$Month), na.action= na.pass, na.rm = TRUE)
names(avgMonthlyDelay) = c('Mon','ArrDelay','DepDelay')
months = c('Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec')
avgMonthlyDelay$Mon = months
names(avgDailyDelay_long)
melted = melt(avgMonthlyDelay,id="Mon")
melted$Mon = factor(melted$Mon, level = months)
#daily_melt = melt(avgDailyDelay, id="D1ay")
#daily_melt$Day = factor(daily_melt$Day)
library(adabag)
train_log_matrix = log(train_smooth)
test_log_matrix = log(test_smooth)
trainDF = as.data.frame(train_log_matrix, row.names = file_list_train)
trainDF$labels = factor(train_labels)
testDF = as.data.frame(test_log_matrix, row.names = 1:2500)
testDF$labels = factor(test_labels)
train.boosting = boosting(labels ~ . , data=trainDF, mfinal=100, control=rpart.control(maxdepth = 6))
prediction = predict.boosting(train.boosting,newdata=testDF)
prediction$confusion
table(prediction$class)
test = as.data.frame(prediction$class)
names(test) = 'pred'
test$actual = labels
test$check = 0
train_error = 1-sum(train.boosting$class == trainDF$labels) / length(trainDF$labels)
prediction$error
library(tm)
library(arules)
author_dirs_train = Sys.glob('../data/ReutersC50/C50train/*')
author_dirs_test = Sys.glob('../data/ReutersC50/C50test/*')
author_dirs_train = author_dirs_train[1:50]
author_dirs_test = author_dirs_test[1:50]
file_list_train = NULL
file_list_test = NULL
train_labels = NULL
test_labels = NULL
readerPlain = function(fname){
readPlain(elem=list(content=readLines(fname)),
id=fname, language='en') }
for(author in author_dirs_train) {
author_name = substring(author, first=29)
files_to_add = Sys.glob(paste0(author, '/*.txt'))
file_list_train = append(file_list_train, files_to_add)
train_labels = append(train_labels, rep(author_name, length(files_to_add)))
}
for(author in author_dirs_test) {
author_name = substring(author, first=28)
files_to_add = Sys.glob(paste0(author, '/*.txt'))
file_list_test = append(file_list_test, files_to_add)
test_labels = append(test_labels, rep(author_name, length(files_to_add)))
}
#Not sure if I need this yet
uniquenames = unique(train_labels)
#training set up
train_docs = lapply(file_list_train, readerPlain)
names(train_docs) = file_list_train
names(train_docs) = sub('.txt', '', names(train_docs))
train_corpus = Corpus(VectorSource(train_docs))
names(train_corpus) = train_labels
train_corpus = tm_map(train_corpus, content_transformer(tolower)) # make everything lowercase
train_corpus = tm_map(train_corpus, content_transformer(removeNumbers)) # remove numbers
train_corpus = tm_map(train_corpus, content_transformer(removePunctuation)) # remove punctuation
train_corpus = tm_map(train_corpus, content_transformer(stripWhitespace)) ## remove excess white-space
train_corpus = tm_map(train_corpus, content_transformer(removeWords), stopwords("SMART"))
DTM_train = DocumentTermMatrix(train_corpus)
DTM_train = removeSparseTerms(DTM_train, 0.975)
#test set up
test_docs = lapply(file_list_test, readerPlain)
names(test_docs) = file_list_test
names(test_docs) = sub('.txt', '', names(test_docs))
test_corpus = Corpus(VectorSource(test_docs))
names(test_corpus) = test_labels
test_corpus = tm_map(test_corpus, content_transformer(tolower)) # make everything lowercase
test_corpus = tm_map(test_corpus, content_transformer(removeNumbers)) # remove numbers
test_corpus = tm_map(test_corpus, content_transformer(removePunctuation)) # remove punctuation
test_corpus = tm_map(test_corpus, content_transformer(stripWhitespace)) ## remove excess white-space
test_corpus = tm_map(test_corpus, content_transformer(removeWords), stopwords("SMART"))
DTM_test = DocumentTermMatrix(test_corpus)
DTM_test = removeSparseTerms(DTM_test, 0.975)
X_train = as.matrix(DTM_train)
X_test = as.matrix(DTM_test)
#Add authors name to the end
trainnames = colnames(X_train)
testnames = colnames(X_test)
droptestwords = vector(length=0)
for (word in testnames)  {if (!word %in% trainnames) {droptestwords = c(droptestwords,word)}}
zerotrainwords = vector(length=0)
for (word in trainnames)  {if (!word %in% testnames) {zerotrainwords = c(zerotrainwords,word)}}
new_X_test = X_test[,!colnames(X_test) %in% droptestwords]
new_X_train = X_train[,!colnames(X_train) %in% zerotrainwords]
smooth_count = 1/nrow(X_train)
train_smooth = new_X_train + smooth_count
test_smooth = new_X_test + smooth_count
author_matrix = rowsum(train_smooth, train_labels)
author_sum = rowSums(author_matrix)
log_author = log(author_matrix/author_sum)
author_final = log_author[,!colnames(log_author) %in% zerotrainwords]
prediction = author_final %*% t(new_X_test)
pred_trans = t(prediction)
author_prediction = colnames(pred_trans)[max.col(pred_trans)]
author_actual = rownames(pred_trans)
Correct_TF = as.integer(author_prediction == author_actual)
total_correct = sum(Correct_TF)
outcomes = cbind.data.frame(author_actual, author_prediction, Correct_TF)
percent_correct = sum(Correct_TF)/length(Correct_TF)
correct_by_author = aggregate.data.frame(outcomes$Correct_TF, by=list(authors = outcomes$author_actual), FUN = sum)
correct_by_author$percent = correct_by_author$x/50
correct_by_author = as.data.frame(correct_by_author)
ordered = correct_by_author[order(correct_by_author$percent),]
head(ordered)
tail(ordered)
library(adabag)
train_log_matrix = log(train_smooth)
test_log_matrix = log(test_smooth)
trainDF = as.data.frame(train_log_matrix, row.names = file_list_train)
trainDF$labels = factor(train_labels)
testDF = as.data.frame(test_log_matrix, row.names = 1:2500)
testDF$labels = factor(test_labels)
train.boosting = boosting(labels ~ . , data=trainDF, mfinal=100, control=rpart.control(maxdepth = 6))
test_pred
library(tm)
library(arules)
author_dirs_train = Sys.glob('../data/ReutersC50/C50train/*')
author_dirs_test = Sys.glob('../data/ReutersC50/C50test/*')
author_dirs_train = author_dirs_train[1:50]
author_dirs_test = author_dirs_test[1:50]
file_list_train = NULL
file_list_test = NULL
train_labels = NULL
test_labels = NULL
readerPlain = function(fname){
readPlain(elem=list(content=readLines(fname)),
id=fname, language='en') }
for(author in author_dirs_train) {
author_name = substring(author, first=29)
files_to_add = Sys.glob(paste0(author, '/*.txt'))
file_list_train = append(file_list_train, files_to_add)
train_labels = append(train_labels, rep(author_name, length(files_to_add)))
}
for(author in author_dirs_test) {
author_name = substring(author, first=28)
files_to_add = Sys.glob(paste0(author, '/*.txt'))
file_list_test = append(file_list_test, files_to_add)
test_labels = append(test_labels, rep(author_name, length(files_to_add)))
}
#Not sure if I need this yet
uniquenames = unique(train_labels)
#training set up
train_docs = lapply(file_list_train, readerPlain)
names(train_docs) = file_list_train
names(train_docs) = sub('.txt', '', names(train_docs))
train_corpus = Corpus(VectorSource(train_docs))
names(train_corpus) = train_labels
train_corpus = tm_map(train_corpus, content_transformer(tolower)) # make everything lowercase
train_corpus = tm_map(train_corpus, content_transformer(removeNumbers)) # remove numbers
train_corpus = tm_map(train_corpus, content_transformer(removePunctuation)) # remove punctuation
train_corpus = tm_map(train_corpus, content_transformer(stripWhitespace)) ## remove excess white-space
train_corpus = tm_map(train_corpus, content_transformer(removeWords), stopwords("SMART"))
DTM_train = DocumentTermMatrix(train_corpus)
DTM_train = removeSparseTerms(DTM_train, 0.975)
#test set up
test_docs = lapply(file_list_test, readerPlain)
names(test_docs) = file_list_test
names(test_docs) = sub('.txt', '', names(test_docs))
test_corpus = Corpus(VectorSource(test_docs))
names(test_corpus) = test_labels
test_corpus = tm_map(test_corpus, content_transformer(tolower)) # make everything lowercase
test_corpus = tm_map(test_corpus, content_transformer(removeNumbers)) # remove numbers
test_corpus = tm_map(test_corpus, content_transformer(removePunctuation)) # remove punctuation
test_corpus = tm_map(test_corpus, content_transformer(stripWhitespace)) ## remove excess white-space
test_corpus = tm_map(test_corpus, content_transformer(removeWords), stopwords("SMART"))
DTM_test = DocumentTermMatrix(test_corpus)
DTM_test = removeSparseTerms(DTM_test, 0.975)
X_train = as.matrix(DTM_train)
X_test = as.matrix(DTM_test)
#Add authors name to the end
trainnames = colnames(X_train)
testnames = colnames(X_test)
droptestwords = vector(length=0)
for (word in testnames)  {if (!word %in% trainnames) {droptestwords = c(droptestwords,word)}}
zerotrainwords = vector(length=0)
for (word in trainnames)  {if (!word %in% testnames) {zerotrainwords = c(zerotrainwords,word)}}
new_X_test = X_test[,!colnames(X_test) %in% droptestwords]
new_X_train = X_train[,!colnames(X_train) %in% zerotrainwords]
smooth_count = 1/nrow(X_train)
train_smooth = new_X_train + smooth_count
test_smooth = new_X_test + smooth_count
author_matrix = rowsum(train_smooth, train_labels)
author_sum = rowSums(author_matrix)
log_author = log(author_matrix/author_sum)
author_final = log_author[,!colnames(log_author) %in% zerotrainwords]
prediction = author_final %*% t(new_X_test)
pred_trans = t(prediction)
author_prediction = colnames(pred_trans)[max.col(pred_trans)]
author_actual = rownames(pred_trans)
Correct_TF = as.integer(author_prediction == author_actual)
total_correct = sum(Correct_TF)
outcomes = cbind.data.frame(author_actual, author_prediction, Correct_TF)
percent_correct = sum(Correct_TF)/length(Correct_TF)
correct_by_author = aggregate.data.frame(outcomes$Correct_TF, by=list(authors = outcomes$author_actual), FUN = sum)
correct_by_author$percent = correct_by_author$x/50
correct_by_author = as.data.frame(correct_by_author)
ordered = correct_by_author[order(correct_by_author$percent),]
head(ordered)
tail(ordered)
library(adabag)
train_log_matrix = log(train_smooth)
test_log_matrix = log(test_smooth)
trainDF = as.data.frame(train_log_matrix, row.names = file_list_train)
trainDF$labels = factor(train_labels)
testDF = as.data.frame(test_log_matrix, row.names = 1:2500)
testDF$labels = factor(test_labels)
train.boosting = boosting(labels ~ . , data=trainDF, mfinal=100, control=rpart.control(maxdepth = 6))
prediction = predict.boosting(train.boosting,newdata=testDF)
prediction$confusion
table(prediction$class)
test_pred = as.data.frame(prediction$class)
names(test_pred) = 'pred'
test_pred$actual = labels
test_pred$actual = labels_test
test_pred$actual = test_labels
test_pred$check = 0
train_error = 1-sum(train.boosting$class == trainDF$labels) / length(trainDF$labels)
prediction$error
names(smaller)
library(reshape2)
library(ggplot2)
library(plyr)
flights = read.csv('../data/ABIA.csv')
names(flights)
dim(flights)
smaller$DepDelay = smaller$DepDelay[is.na(smaller$DepDelay)] = 0
smaller = flights[-c(10,11,12,13,14,19,20,21,23,24,25,26,27,28,29)]
smaller$DepDelay = smaller$DepDelay[is.na(smaller$DepDelay)] = 0
smaller$DepDelay
smaller$ArrDelay = smaller$ArrDelay[is.na(smaller$ArrDelay)] = 0
smaller$depdate = as.Date(paste(smaller$DayofMonth,smaller$Month,smaller$Year,sep="."),"%d.%m.%Y")
GetHour= function(time){
if (nchar(time) == 4){
return (substr(time,1,2))
}
return (substr(time,1,1))
}
smaller$hour = lapply(smaller$CRSDepTime,GetHour)
totaldelay = rowsum(smaller[c(10,11)],factor(smaller$depdate),na.action=na.pass, na.rm = TRUE)
avgDailyDelay = aggregate (smaller[c(10,11)],list(smaller$depdate),FUN= mean, na.action = na.pass, na.rm = TRUE)
avgDailyDelay
library(reshape2)
library(ggplot2)
library(plyr)
flights = read.csv('../data/ABIA.csv')
names(flights)
dim(flights)
smaller = flights[-c(10,11,12,13,14,19,20,21,23,24,25,26,27,28,29)]
names(smaller)
#convert a date object
smaller$depdate = as.Date(paste(smaller$DayofMonth,smaller$Month,smaller$Year,sep="."),"%d.%m.%Y")
GetHour= function(time){
if (nchar(time) == 4){
return (substr(time,1,2))
}
return (substr(time,1,1))
}
smaller$hour = lapply(smaller$CRSDepTime,GetHour)
totaldelay = rowsum(smaller[c(10,11)],factor(smaller$depdate),na.action=na.pass, na.rm = TRUE)
avgDailyDelay = aggregate (smaller[c(10,11)],list(smaller$depdate),FUN= mean, na.action = na.pass, na.rm = TRUE)
names(avgDailyDelay) = c('D1ay','ArrDelay','DepDelay')
avgDailyDelay_long = melt(avgDailyDelay,id="D1ay")
avgDailyDelay = aggregate(smaller[c(10,11)],list(smaller$depdate),FUN=mean,na.action=na.pass, na.rm= TRUE)
avgMonthlyDelay= aggregate(smaller[c(10,11)],list(smaller$Month),FUN = mean, na.action = na.pass, na.rm = TRUE)
totalMonthlyCancelation = rowsum(smaller[14],factor(smaller$Month), na.action= na.pass, na.rm = TRUE)
names(avgMonthlyDelay) = c('Mon','ArrDelay','DepDelay')
months = c('Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec')
avgMonthlyDelay$Mon = months
names(avgDailyDelay_long)
melted = melt(avgMonthlyDelay,id="Mon")
melted$Mon = factor(melted$Mon, level = months)
ggplot(data=melted, aes(Mon,value, fill=factor(variable)))+geom_bar(position="dodge", stat = "identity") + scale_x_discrete( name = "Month" )+scale_y_continuous(name="Delay")+labs(aesthetic='Delay')+ggtitle("Average Delay by Month and Type")
avgMonthlyDelay$Cancelation = totalMonthlyCancelation
avgMonthlyDelay
melted = melt(avgMonthlyDelay,id="Mon")
melted
avgMonthlyDelay
avgMonthlyDelay$Cancelation = as.numeric(totalMonthlyCancelation)
melted = melt(avgMonthlyDelay,id="Mon")
apply(avgMonthlyDelay,class)
lapply(avgMonthlyDelay,class)
avgMonthlyDelay$Cancelation = as.numeric(totalMonthlyCancelation)
cbind(avgMonthlyDelay,totalMonthlyCancelation)
lapply(avgMonthlyDelay,class)
test = cbind(avgMonthlyDelay,totalMonthlyCancelation)
lapply(test,class)
avgMonthlyDelay= aggregate(smaller[c(10,11)],list(smaller$Month),FUN = mean, na.action = na.pass, na.rm = TRUE)
names(avgMonthlyDelay) = c('Mon','ArrDelay','DepDelay')
months = c('Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec')
avgMonthlyDelay$Mon = months
avgMonthlyDelay
avgMonthlyDelay = cbind(avgMonthlyDelay,as.numeric(totalMonthlyCancelation))
avgMonthlyDelay = cbind(avgMonthlyDelay,totalMonthlyCancelation)
lapply(test,class)
avgMonthlyDelay= aggregate(smaller[c(10,11)],list(smaller$Month),FUN = mean, na.action = na.pass, na.rm = TRUE)
lapply(avgMonthlyDelay,class)
names(avgMonthlyDelay) = c('Mon','ArrDelay','DepDelay')
months = c('Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec')
avgMonthlyDelay$Mon = months
avgMonthlyDelay = cbind(avgMonthlyDelay,totalMonthlyCancelation)
lapply(avgMonthlyDelay,class)
melted = melt(avgMonthlyDelay,id="Mon")
melted$Mon = factor(melted$Mon, level = months)
ggplot(melted)+geom_bar(aes(Mon, value))
totalMonthlyCancelation = rowsum(smaller[14],factor(smaller$Month), na.action= na.pass, na.rm = TRUE)
names(avgMonthlyDelay) = c('Mon','ArrDelay','DepDelay')
months = c('Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec')
avgMonthlyDelay= aggregate(smaller[c(10,11)],list(smaller$Month),FUN = mean, na.action = na.pass, na.rm = TRUE)
names(avgMonthlyDelay) = c('Mon','ArrDelay','DepDelay')
months = c('Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec')
avgMonthlyDelay$Mon = months
lapply(avgMonthlyDelay,class)
names(avgDailyDelay_long)
melted = melt(avgMonthlyDelay,id="Mon")
melted$Mon = factor(melted$Mon, level = months)
melted = cbind(melted,totalMonthlyCancelation)
melted
melted2 = cbind(melted,totalMonthlyCancelation)
ggplot(melted2)+geom_bar(aes(Mon,value,fill=factor(variable)),position = "dodge", stat="identity")
ggplot(melted2)+geom_bar(aes(Mon,value,fill=factor(variable)),position = "dodge", stat="identity")+geom_line(aes(as.numeric(Mon),Cancelled))
totalMonthlyCancelation
p2= ggplot(totalMonthlyCancelation)+geom_line(stat='identity')
p2
p2= ggplot(totalMonthlyCancelation)
p2
p2 = ggplot(totalMonthlyCancelation)+geom_line(stat="identity")
p2
p2 = ggplot(totalMonthlyCancelation)+geom_line(aes(Cancelled,col='red'),stat="identity")
p2
p2 = ggplot(melted2)+geom_line(aes(as.numeric(Mon),Cancelled,col='red'),stat="identity")
p2
g1 <- ggplot_gtable(ggplot_build(p1))
p1 = ggplot(melted2)+geom_bar(aes(Mon,value,fill=factor(variable)),position = "dodge", stat="identity")
g1 <- ggplot_gtable(ggplot_build(p1))
g2 <- ggplot_gtable(ggplot_build(p2))
pp <- c(subset(g1$layout, name == "panel", se = t:r))
g <- gtable_add_grob(g1, g2$grobs[[which(g2$layout$name == "panel")]], pp$t,
pp$l, pp$b, pp$l)
library(gtable)
library(grid)
g <- gtable_add_grob(g1, g2$grobs[[which(g2$layout$name == "panel")]], pp$t,
pp$l, pp$b, pp$l)
grid.draw(g)
ia <- which(g2$layout$name == "axis-l")
ga <- g2$grobs[[ia]]
ax <- ga$children[[2]]
ax$widths <- rev(ax$widths)
ax$grobs <- rev(ax$grobs)
ax$grobs[[1]]$x <- ax$grobs[[1]]$x - unit(1, "npc") + unit(0.15, "cm")
g <- gtable_add_cols(g, g2$widths[g2$layout[ia, ]$l], length(g$widths) - 1)
g <- gtable_add_grob(g, ax, pp$t, length(g$widths) - 1, pp$b)
grid.draw(g)
g1
grid.draw(g1)
g <- gtable_add_grob(g1, g2$grobs[[which(g2$layout$name == "panel")]], pp$t,
pp$l, pp$b, pp$l)
grid.draw(g)
grid.draw(g1)
g <- gtable_add_grob(g1, g2$grobs[[which(g2$layout$name == "panel")]], pp$t,
pp$l, pp$b, pp$l)
ia <- which(g2$layout$name == "axis-l")
ga <- g2$grobs[[ia]]
ax <- ga$children[[2]]
ax$widths <- rev(ax$widths)
ax$grobs <- rev(ax$grobs)
ax$grobs[[1]]$x <- ax$grobs[[1]]$x - unit(1, "npc") + unit(0.15, "cm")
g <- gtable_add_cols(g, g2$widths[g2$layout[ia, ]$l], length(g$widths) - 1)
g <- gtable_add_grob(g, ax, pp$t, length(g$widths) - 1, pp$b)
grid.draw(g)
p1
grid.draw(g)
p1 = ggplot(melted2)+geom_bar(aes(Mon,value,fill=factor(variable)),position = "dodge", stat="identity")
p2 = ggplot(melted2)+geom_line(aes(as.numeric(Mon),Cancelled,col='red'),stat="identity")
g1 <- ggplot_gtable(ggplot_build(p1))
g2 <- ggplot_gtable(ggplot_build(p2))
pp <- c(subset(g1$layout, name == "panel", se = t:r))
g <- gtable_add_grob(g1, g2$grobs[[which(g2$layout$name == "panel")]], pp$t,
pp$l, pp$b, pp$l)
ia <- which(g2$layout$name == "axis-l")
ga <- g2$grobs[[ia]]
ax <- ga$children[[2]]
ax$widths <- rev(ax$widths)
ax$grobs <- rev(ax$grobs)
ax$grobs[[1]]$x <- ax$grobs[[1]]$x - unit(1, "npc") + unit(0.15, "cm")
g <- gtable_add_cols(g, g2$widths[g2$layout[ia, ]$l], length(g$widths) - 1)
g <- gtable_add_grob(g, ax, pp$t, length(g$widths) - 1, pp$b)
grid.draw(g)
pp<-c(subset(g1$layout,name=="panel",se=t:r))
g<-gtable_add_grob(g1, g2$grobs[[which(g2$layout$name=="panel")]],pp$t,pp$l,pp$b,pp$l)
ia<-which(g2$layout$name=="axis-l")
ga <- g2$grobs[[ia]]
ax <- ga$children[[2]]
ax$widths <- rev(ax$widths)
ax$grobs <- rev(ax$grobs)
ax$grobs[[1]]$x <- ax$grobs[[1]]$x - unit(1, "npc") + unit(0.15, "cm")
g <- gtable_add_cols(g, g2$widths[g2$layout[ia, ]$l], length(g$widths) - 1)
g <- gtable_add_grob(g, ax, pp$t, length(g$widths) - 1, pp$b)
grid.draw(g)
totalMonthlyCancelation$Mon = months
totalMonthlyCancelation$Mon
totalMonthlyCancelation
melted = melt(avgMonthlyDelay,id="Mon")
melted$Mon = factor(melted$Mon, level = months)
p2 = ggplot(totalMonthlyCancelation)+geom_line(aes(as.numeric(Mon),Cancelled,col='red'),stat="identity")
1 <- ggplot_gtable(ggplot_build(p1))
g2 <- ggplot_gtable(ggplot_build(p2))
pp<-c(subset(g1$layout,name=="panel",se=t:r))
g<-gtable_add_grob(g1, g2$grobs[[which(g2$layout$name=="panel")]],pp$t,pp$l,pp$b,pp$l)
ia<-which(g2$layout$name=="axis-l")
ga <- g2$grobs[[ia]]
ax <- ga$children[[2]]
ax$widths <- rev(ax$widths)
ax$grobs <- rev(ax$grobs)
ax$grobs[[1]]$x <- ax$grobs[[1]]$x - unit(1, "npc") + unit(0.15, "cm")
g <- gtable_add_cols(g, g2$widths[g2$layout[ia, ]$l], length(g$widths) - 1)
g <- gtable_add_grob(g, ax, pp$t, length(g$widths) - 1, pp$b)
grid.draw(g)
p2 = ggplot(totalMonthlyCancelation)+geom_line(aes(as.numeric(Mon),Cancelled,col='red'),stat="identity")
g2 <- ggplot_gtable(ggplot_build(p2))
g2
p2
p2 = ggplot(totalMonthlyCancelation)+geom_line(aes(as.numeric(Mon),Cancelled,col='red'),stat="identity")
p2
totalMonthlyCancelation
as.numeric(totalMonthlyCancelation$Mon)
avgMonthlyDelay$Mon = c(1,2,3,4,5,6,7,8,9,10,11,12)
avgMonthlyDelay
avgMonthlyDelay$Mon = months
totalMonthlyCancelation$Mon = c(1,2,3,4,5,6,7,8,9,10,11,12)
totalMonthlyCancelation
p2 = ggplot(totalMonthlyCancelation)+geom_line(aes(as.numeric(Mon),Cancelled,col='red'),stat="identity")
g2 <- ggplot_gtable(ggplot_build(p2))
pp<-c(subset(g1$layout,name=="panel",se=t:r))
g<-gtable_add_grob(g1, g2$grobs[[which(g2$layout$name=="panel")]],pp$t,pp$l,pp$b,pp$l)
ia<-which(g2$layout$name=="axis-l")
ga <- g2$grobs[[ia]]
ax <- ga$children[[2]]
ax$widths <- rev(ax$widths)
ax$grobs <- rev(ax$grobs)
ax$grobs[[1]]$x <- ax$grobs[[1]]$x - unit(1, "npc") + unit(0.15, "cm")
g <- gtable_add_cols(g, g2$widths[g2$layout[ia, ]$l], length(g$widths) - 1)
g <- gtable_add_grob(g, ax, pp$t, length(g$widths) - 1, pp$b)
grid.draw(g)
p1 = ggplot(melted)+geom_bar(aes(Mon,value,fill=factor(variable)),position = "dodge", stat="identity")
p2 = ggplot(totalMonthlyCancelation)+geom_line(aes(as.numeric(Mon),Cancelled,col='red'),stat="identity")
g1 <- ggplot_gtable(ggplot_build(p1))
g2 <- ggplot_gtable(ggplot_build(p2))
pp<-c(subset(g1$layout,name=="panel",se=t:r))
g<-gtable_add_grob(g1, g2$grobs[[which(g2$layout$name=="panel")]],pp$t,pp$l,pp$b,pp$l)
ia<-which(g2$layout$name=="axis-l")
ga <- g2$grobs[[ia]]
ax <- ga$children[[2]]
ax$widths <- rev(ax$widths)
ax$grobs <- rev(ax$grobs)
ax$grobs[[1]]$x <- ax$grobs[[1]]$x - unit(1, "npc") + unit(0.15, "cm")
g <- gtable_add_cols(g, g2$widths[g2$layout[ia, ]$l], length(g$widths) - 1)
g <- gtable_add_grob(g, ax, pp$t, length(g$widths) - 1, pp$b)
grid.draw(g)
ggplot()+geom_line(data= avgDailyDelay_Dep, aes(x=Group.1, y= DepDelay,col='Departure'))+geom_line(data= avgDailyDelay_Arr, aes(x=Group.1, y= ArrDelay,col='Arrival'))
daily_melt = melt(avgDailyDelay, id="D1ay")
daily_melt$Day = factor(daily_melt$Day)
ggplot(data=avgDailyDelay_long, aes(X=D1ay, y=value, fill=factor(variable) ))
base + geom_line(data=avgMonthlyDelay_Arr, aes(x=Group.1, y=ArrDelay, col='red')) + geom_line(data=avgMonthlyDelay_Dep, aes(x=Group.1, y=DepDelay, col='green'))
